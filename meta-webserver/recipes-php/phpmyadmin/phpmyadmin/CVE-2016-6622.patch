From 767195e197e1b75609875330602aa203782e8671 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michal=20=C4=8Ciha=C5=99?= <michal@cihar.com>
Date: Tue, 12 Jul 2016 15:04:45 +0200
Subject: [PATCH] Sanitize MySQL host name before connecting
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

It can contain p: prefix which we don't want to honor.

Signed-off-by: Michal Čihař <michal@cihar.com>
---
 libraries/config/Validator.php                     |    1 +
 libraries/core.lib.php                             |   18 ++++++++
 libraries/plugins/auth/AuthenticationCookie.php    |    2 +-
 libraries/replication.inc.php                      |    2 +-
 test/libraries/core/PMA_sanitizeMySQLHost_test.php |   48 ++++++++++++++++++++
 5 files changed, 69 insertions(+), 2 deletions(-)
 create mode 100644 test/libraries/core/PMA_sanitizeMySQLHost_test.php

diff --git a/libraries/config/Validator.php b/libraries/config/Validator.php
index b7973ce..0421031 100644
--- a/libraries/config/Validator.php
+++ b/libraries/config/Validator.php
@@ -227,6 +227,7 @@ class Validator
     ) {
         //    static::testPHPErrorMsg();
         $error = null;
+        $host = PMA_sanitizeMySQLHost($host);
 
         if (DatabaseInterface::checkDbExtension('mysqli')) {
             $socket = empty($socket) || $connect_type == 'tcp' ? null : $socket;
diff --git a/libraries/core.lib.php b/libraries/core.lib.php
index 0931413..aed72ff 100644
--- a/libraries/core.lib.php
+++ b/libraries/core.lib.php
@@ -990,3 +990,21 @@ if(! function_exists('hash_equals')) {
         return ! $ret;
     }
 }
+
+/**
+ * Sanitizes MySQL hostname
+ *
+ * * strips p: prefix
+ *
+ * @param string $name User given hostname
+ *
+ * @return string
+ */
+function PMA_sanitizeMySQLHost($name)
+{
+    if (strtolower(substr($name, 0, 2)) == 'p:') {
+        return substr($name, 2);
+    }
+
+    return $name;
+}
diff --git a/libraries/plugins/auth/AuthenticationCookie.php b/libraries/plugins/auth/AuthenticationCookie.php
index eedcb0b..18be5a7 100644
--- a/libraries/plugins/auth/AuthenticationCookie.php
+++ b/libraries/plugins/auth/AuthenticationCookie.php
@@ -326,7 +326,7 @@ class AuthenticationCookie extends AuthenticationPlugin
                         return false;
                     }
                 }
-                $GLOBALS['pma_auth_server'] = $_REQUEST['pma_servername'];
+                $GLOBALS['pma_auth_server'] = PMA_sanitizeMySQLHost($_REQUEST['pma_servername']);
             }
             PMA_secureSession();
             return true;
diff --git a/libraries/replication.inc.php b/libraries/replication.inc.php
index f4a4cd4..9f2179b 100644
--- a/libraries/replication.inc.php
+++ b/libraries/replication.inc.php
@@ -299,7 +299,7 @@ function PMA_Replication_connectToMaster(
 
     // 5th parameter set to true means that it's an auxiliary connection
     // and we must not go back to login page if it fails
-    return $GLOBALS['dbi']->connect($user, $password, false, $server, true);
+    return PMA_DBI_connect($user, $password, false, PMA_sanitizeMySQLHost($server), true);
 }
 /**
  * Fetches position and file of current binary log on master
diff --git a/test/libraries/core/PMA_sanitizeMySQLHost_test.php b/test/libraries/core/PMA_sanitizeMySQLHost_test.php
new file mode 100644
index 0000000..1b44047
--- /dev/null
+++ b/test/libraries/core/PMA_sanitizeMySQLHost_test.php
@@ -0,0 +1,48 @@
+<?php
+/* vim: set expandtab sw=4 ts=4 sts=4: */
+/**
+ * Test for PMA_sanitizeMySQLHost
+ *
+ * @package PhpMyAdmin-test
+ */
+
+/*
+ * Include to test.
+ */
+require_once 'libraries/core.lib.php';
+
+class PMA_sanitizeMySQLHost_test extends PHPUnit_Framework_TestCase
+{
+    /**
+     * Test for MySQL host sanitizing
+     *
+     * @param string $host     Test host name
+     * @param string $expected Expected result
+     *
+     * @return void
+     *
+     * @dataProvider provideMySQLHosts
+     */
+    function testSanitizeMySQLHost($host, $expected)
+    {
+        $this->assertEquals(
+            $expected,
+            PMA_sanitizeMySQLHost($host)
+        );
+    }
+
+    /**
+     * Test data provider
+     *
+     * @return array
+     */
+    function provideMySQLHosts()
+    {
+        return array(
+            array('p:foo.bar', 'foo.bar'),
+            array('bar.baz', 'bar.baz'),
+            array('P:example.com', 'example.com'),
+        );
+    }
+
+}
-- 
1.7.9.5

