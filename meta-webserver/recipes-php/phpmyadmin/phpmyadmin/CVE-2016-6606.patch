From a97be3a604cb9a56074b76905792479251e744a7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michal=20=C4=8Ciha=C5=99?= <michal@cihar.com>
Date: Fri, 8 Jul 2016 17:15:09 +0200
Subject: [PATCH] Improve cookie encryption
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- use MAC to validate content before decryption
- create unique IV for every cookie

Signed-off-by: Michal Čihař <michal@cihar.com>
---
 libraries/plugins/auth/AuthenticationCookie.php    |   62 +++++++++++---------
 .../plugin/auth/AuthenticationCookieTest.php       |    5 +-
 2 files changed, 37 insertions(+), 30 deletions(-)

diff --git a/libraries/plugins/auth/AuthenticationCookie.php b/libraries/plugins/auth/AuthenticationCookie.php
index 8d753cd..ce5f5b9 100644
--- a/libraries/plugins/auth/AuthenticationCookie.php
+++ b/libraries/plugins/auth/AuthenticationCookie.php
@@ -359,9 +359,7 @@ class AuthenticationCookie extends AuthenticationPlugin
         }
 
         // check cookies
-        if (empty($_COOKIE['pmaUser-' . $GLOBALS['server']])
-            || empty($_COOKIE['pma_iv-' . $GLOBALS['server']])
-        ) {
+        if (empty($_COOKIE['pmaUser-' . $GLOBALS['server']])) {
             return false;
         }
 
@@ -485,8 +483,6 @@ class AuthenticationCookie extends AuthenticationPlugin
     {
         global $cfg;
 
-        $this->createIV();
-
         // Name and password cookies need to be refreshed each time
         // Duration = one month for username
         $this->storeUsernameCookie($cfg['Server']['user']);
@@ -679,20 +675,28 @@ class AuthenticationCookie extends AuthenticationPlugin
      */
     public function cookieEncrypt($data, $secret)
     {
+        $iv = $this->createIV();
         if (self::useOpenSSL()) {
-            return openssl_encrypt(
+            $result = openssl_encrypt(
                 $data,
                 'AES-128-CBC',
                 $secret,
                 0,
-                $this->_cookie_iv
+                $iv
             );
         } else {
             $cipher = new Crypt\AES(Crypt\Base::MODE_CBC);
-            $cipher->setIV($this->_cookie_iv);
+            $cipher->setIV($iv);
             $cipher->setKey($secret);
-            return base64_encode($cipher->encrypt($data));
+            $result = base64_encode($cipher->encrypt($data));
         }
+        return json_encode(
+            array(
+                'iv' => base64_encode($iv),
+                'mac' => sha1($result . $secret),
+                'payload' => $result,
+            )
+        );
     }
 
     /**
@@ -702,33 +706,35 @@ class AuthenticationCookie extends AuthenticationPlugin
      * @param string $encdata encrypted data
      * @param string $secret  the secret
      *
-     * @return string original data
+     * @return string|bool original data, false on error
      */
     public function cookieDecrypt($encdata, $secret)
     {
-        if (is_null($this->_cookie_iv)) {
-            $this->_cookie_iv = base64_decode(
-                $_COOKIE['pma_iv-' . $GLOBALS['server']],
-                true
-            );
+        $data = json_decode($encdata, true);
+
+        if (! is_array($data) || ! isset($data['mac']) || ! isset($data['iv']) || ! isset($data['payload'])) {
+            return false;
         }
-        if (mb_strlen($this->_cookie_iv, '8bit') < $this->getIVSize()) {
-                $this->createIV();
+
+        $newmac = sha1($data['payload'] . $secret);
+
+        if (! hash_equals($data['mac'], $newmac)) {
+            return false;
         }
 
         if (self::useOpenSSL()) {
             return openssl_decrypt(
-                $encdata,
+                $data['payload'],
                 'AES-128-CBC',
                 $secret,
                 0,
-                $this->_cookie_iv
+                base64_decode($data['iv'])
             );
         } else {
             $cipher = new Crypt\AES(Crypt\Base::MODE_CBC);
-            $cipher->setIV($this->_cookie_iv);
+            $cipher->setIV(base64_decode($data['iv']));
             $cipher->setKey($secret);
-            return $cipher->decrypt(base64_decode($encdata));
+            return $cipher->decrypt(base64_decode($data['payload']));
         }
     }
 
@@ -756,24 +762,26 @@ class AuthenticationCookie extends AuthenticationPlugin
      */
     public function createIV()
     {
+        /* Testsuite shortcut only to allow predictable IV */
+        if (! is_null($this->_cookie_iv)) {
+            return $this->_cookie_iv;
+        }
         if (self::useOpenSSL()) {
-            $this->_cookie_iv = openssl_random_pseudo_bytes(
+            return openssl_random_pseudo_bytes(
                 $this->getIVSize()
             );
         } else {
-            $this->_cookie_iv = Crypt\Random::string(
+            return Crypt\Random::string(
                 $this->getIVSize()
             );
         }
-        $GLOBALS['PMA_Config']->setCookie(
-            'pma_iv-' . $GLOBALS['server'],
-            base64_encode($this->_cookie_iv)
-        );
     }
 
     /**
      * Sets encryption IV to use
      *
+     * This is for testing only!
+     *
      * @param string $vector The IV
      *
      * @return void
diff --git a/test/classes/plugin/auth/AuthenticationCookieTest.php b/test/classes/plugin/auth/AuthenticationCookieTest.php
index 2f979d9..d999336 100644
--- a/test/classes/plugin/auth/AuthenticationCookieTest.php
+++ b/test/classes/plugin/auth/AuthenticationCookieTest.php
@@ -1103,7 +1103,7 @@ class AuthenticationCookieTest extends PMATestCase
         $this->object->setIV('testiv09testiv09');
         // works with the openssl extension active or inactive
         $this->assertEquals(
-            '+coP/up/ZBTBwbiEpCUVXQ==',
+            '{"iv":"dGVzdGl2MDl0ZXN0aXYwOQ==","mac":"a2749d5b5b8857adfb2dd0b28582a0c0388cb709","payload":"+coP\/up\/ZBTBwbiEpCUVXQ=="}',
             $this->object->cookieEncrypt('data123', 'sec321')
         );
     }
@@ -1115,12 +1115,11 @@ class AuthenticationCookieTest extends PMATestCase
      */
     public function testCookieDecrypt()
     {
-        $this->object->setIV('testiv09testiv09');
         // works with the openssl extension active or inactive
         $this->assertEquals(
             'data123',
             $this->object->cookieDecrypt(
-                '+coP/up/ZBTBwbiEpCUVXQ==',
+                '{"iv":"dGVzdGl2MDl0ZXN0aXYwOQ==","mac":"a2749d5b5b8857adfb2dd0b28582a0c0388cb709","payload":"+coP\/up\/ZBTBwbiEpCUVXQ=="}',
                 'sec321'
             )
         );
-- 
1.7.9.5

