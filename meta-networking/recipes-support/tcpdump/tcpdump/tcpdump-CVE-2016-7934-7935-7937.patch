From cb922d07cce6574874b954555ebad4338748087b Mon Sep 17 00:00:00 2001
From: Francois-Xavier Le Bail <fx.lebail@yahoo.com>
Date: Tue, 17 Nov 2015 17:12:22 +0100
Subject: [PATCH] CVE-2016-7934,7935,7937/RTP: Fix two segmentation faults

Add two test files for these fixes.
Add more bounds checks in VAT, RTP and RTCP printers.

Moreover:
Add and use *_tstr[] strings.
Update the output of a test accordingly.
Remove spaces before tabs.
---
 print-udp.c                       |   80 +++++++++++++++++++++++++------------
 tests/TESTLIST                    |    5 +++
 tests/rtp-seg-fault-1.out         |    2 +
 tests/rtp-seg-fault-1.pcap        |  Bin 0 -> 2360 bytes
 tests/rtp-seg-fault-2.out         |    2 +
 tests/rtp-seg-fault-2.pcap        |  Bin 0 -> 1192 bytes
 tests/udp-length-heapoverflow.out |    2 +-
 7 files changed, 65 insertions(+), 26 deletions(-)
 create mode 100644 tests/rtp-seg-fault-1.out
 create mode 100644 tests/rtp-seg-fault-1.pcap
 create mode 100644 tests/rtp-seg-fault-2.out
 create mode 100644 tests/rtp-seg-fault-2.pcap

diff --git a/print-udp.c b/print-udp.c
index 5cdd64b..ada3c21 100644
--- a/print-udp.c
+++ b/print-udp.c
@@ -44,6 +44,11 @@
 #include "nameser.h"
 #include "nfs.h"
 
+static const char vat_tstr[] = " [|vat]";
+static const char rtp_tstr[] = " [|rtp]";
+static const char rtcp_tstr[] = " [|rtcp]";
+static const char udp_tstr[] = " [|udp]";
+
 struct rtcphdr {
 	uint16_t rh_flags;	/* T:2 P:1 CNT:5 PT:8 */
 	uint16_t rh_len;	/* length of message (in words) */
@@ -97,16 +102,25 @@ static void
 vat_print(netdissect_options *ndo, const void *hdr, register const struct udphdr *up)
 {
 	/* vat/vt audio */
-	u_int ts = EXTRACT_16BITS(hdr);
+	u_int ts;
+
+	ND_TCHECK_16BITS((const u_int *)hdr);
+	ts = EXTRACT_16BITS(hdr);
 	if ((ts & 0xf060) != 0) {
 		/* probably vt */
+		ND_TCHECK_16BITS(&up->uh_ulen);
 		ND_PRINT((ndo, "udp/vt %u %d / %d",
 			     (uint32_t)(EXTRACT_16BITS(&up->uh_ulen) - sizeof(*up)),
 			     ts & 0x3ff, ts >> 10));
 	} else {
 		/* probably vat */
-		uint32_t i0 = EXTRACT_32BITS(&((u_int *)hdr)[0]);
-		uint32_t i1 = EXTRACT_32BITS(&((u_int *)hdr)[1]);
+		uint32_t i0, i1;
+
+		ND_TCHECK_32BITS(&((const u_int *)hdr)[0]);
+		i0 = EXTRACT_32BITS(&((const u_int *)hdr)[0]);
+		ND_TCHECK_32BITS(&((const u_int *)hdr)[1]);
+		i1 = EXTRACT_32BITS(&((const u_int *)hdr)[1]);
+		ND_TCHECK_16BITS(&up->uh_ulen);
 		ND_PRINT((ndo, "udp/vat %u c%d %u%s",
 			(uint32_t)(EXTRACT_16BITS(&up->uh_ulen) - sizeof(*up) - 8),
 			i0 & 0xffff,
@@ -117,6 +131,9 @@ vat_print(netdissect_options *ndo, const void *hdr, register const struct udphdr
 		if (i0 & 0x3f000000)
 			ND_PRINT((ndo, " s%d", (i0 >> 24) & 0x3f));
 	}
+
+trunc:
+	ND_PRINT((ndo, "%s", vat_tstr));
 }
 
 static void
@@ -125,12 +142,16 @@ rtp_print(netdissect_options *ndo, const void *hdr, u_int len,
 {
 	/* rtp v1 or v2 */
 	u_int *ip = (u_int *)hdr;
-	u_int hasopt, hasext, contype, hasmarker;
-	uint32_t i0 = EXTRACT_32BITS(&((u_int *)hdr)[0]);
-	uint32_t i1 = EXTRACT_32BITS(&((u_int *)hdr)[1]);
-	u_int dlen = EXTRACT_16BITS(&up->uh_ulen) - sizeof(*up) - 8;
+	u_int hasopt, hasext, contype, hasmarker, dlen;
+	uint32_t i0, i1;
 	const char * ptype;
 
+	ND_TCHECK_32BITS(&((const u_int *)hdr)[0]);
+	i0 = EXTRACT_32BITS(&((const u_int *)hdr)[0]);
+	ND_TCHECK_32BITS(&((const u_int *)hdr)[1]);
+	i1 = EXTRACT_32BITS(&((const u_int *)hdr)[1]);
+	ND_TCHECK_16BITS(&up->uh_ulen);
+	dlen = EXTRACT_16BITS(&up->uh_ulen) - sizeof(*up) - 8;
 	ip += 2;
 	len >>= 2;
 	len -= 2;
@@ -161,10 +182,12 @@ rtp_print(netdissect_options *ndo, const void *hdr, u_int len,
 		i0 & 0xffff,
 		i1));
 	if (ndo->ndo_vflag) {
+		ND_TCHECK_32BITS(&((const u_int *)hdr)[2]);
 		ND_PRINT((ndo, " %u", EXTRACT_32BITS(&((u_int *)hdr)[2])));
 		if (hasopt) {
 			u_int i2, optlen;
 			do {
+				ND_TCHECK2(*ip, 4);
 				i2 = EXTRACT_32BITS(ip);
 				optlen = (i2 >> 16) & 0xff;
 				if (optlen == 0 || optlen > len) {
@@ -177,6 +200,7 @@ rtp_print(netdissect_options *ndo, const void *hdr, u_int len,
 		}
 		if (hasext) {
 			u_int i2, extlen;
+			ND_TCHECK2(*ip, 4);
 			i2 = EXTRACT_32BITS(ip);
 			extlen = (i2 & 0xffff) + 1;
 			if (extlen > len) {
@@ -185,9 +209,13 @@ rtp_print(netdissect_options *ndo, const void *hdr, u_int len,
 			}
 			ip += extlen;
 		}
+		ND_TCHECK(*ip);
 		if (contype == 0x1f) /*XXX H.261 */
 			ND_PRINT((ndo, " 0x%04x", EXTRACT_32BITS(ip) >> 16));
 	}
+
+trunc:
+	ND_PRINT((ndo, "%s", rtp_tstr));
 }
 
 static const u_char *
@@ -201,10 +229,9 @@ rtcp_print(netdissect_options *ndo, const u_char *hdr, const u_char *ep)
 	uint16_t flags;
 	int cnt;
 	double ts, dts;
-	if ((u_char *)(rh + 1) > ep) {
-		ND_PRINT((ndo, " [|rtcp]"));
-		return (ep);
-	}
+	if ((const u_char *)(rh + 1) > ep)
+		goto trunc;
+	ND_TCHECK(*rh);
 	len = (EXTRACT_16BITS(&rh->rh_len) + 1) * 4;
 	flags = EXTRACT_16BITS(&rh->rh_flags);
 	cnt = (flags >> 8) & 0x1f;
@@ -216,10 +243,9 @@ rtcp_print(netdissect_options *ndo, const u_char *hdr, const u_char *ep)
 			ND_PRINT((ndo, " [%d]", len));
 		if (ndo->ndo_vflag)
 			ND_PRINT((ndo, " %u", EXTRACT_32BITS(&rh->rh_ssrc)));
-		if ((u_char *)(sr + 1) > ep) {
-			ND_PRINT((ndo, " [|rtcp]"));
-			return (ep);
-		}
+		if ((const u_char *)(sr + 1) > ep)
+			goto trunc;
+		ND_TCHECK(*sr);
 		ts = (double)(EXTRACT_32BITS(&sr->sr_ntp.upper)) +
 		    ((double)(EXTRACT_32BITS(&sr->sr_ntp.lower)) /
 		    4294967296.0);
@@ -255,10 +281,9 @@ rtcp_print(netdissect_options *ndo, const u_char *hdr, const u_char *ep)
 	if (cnt > 1)
 		ND_PRINT((ndo, " c%d", cnt));
 	while (--cnt >= 0) {
-		if ((u_char *)(rr + 1) > ep) {
-			ND_PRINT((ndo, " [|rtcp]"));
-			return (ep);
-		}
+		if ((const u_char *)(rr + 1) > ep)
+			goto trunc;
+		ND_TCHECK(*rr);
 		if (ndo->ndo_vflag)
 			ND_PRINT((ndo, " %u", EXTRACT_32BITS(&rr->rr_srcid)));
 		ts = (double)(EXTRACT_32BITS(&rr->rr_lsr)) / 65536.;
@@ -269,6 +294,10 @@ rtcp_print(netdissect_options *ndo, const u_char *hdr, const u_char *ep)
 		    EXTRACT_32BITS(&rr->rr_dv), ts, dts));
 	}
 	return (hdr + len);
+
+trunc:
+	ND_PRINT((ndo, "%s", rtcp_tstr));
+	return ep;
 }
 
 static int udp_cksum(netdissect_options *ndo, register const struct ip *ip,
@@ -369,8 +398,7 @@ udp_print(netdissect_options *ndo, register const u_char *bp, u_int length,
 #endif /*INET6*/
 	if (!ND_TTEST(up->uh_dport)) {
 		udpipaddr_print(ndo, ip, -1, -1);
-		ND_PRINT((ndo, "[|udp]"));
-		return;
+		goto trunc;
 	}
 
 	sport = EXTRACT_16BITS(&up->uh_sport);
@@ -378,8 +406,7 @@ udp_print(netdissect_options *ndo, register const u_char *bp, u_int length,
 
 	if (!ND_TTEST(up->uh_ulen)) {
 		udpipaddr_print(ndo, ip, sport, dport);
-		ND_PRINT((ndo, "[|udp]"));
-		return;
+		goto trunc;
 	}
 	if (length < sizeof(struct udphdr)) {
 		udpipaddr_print(ndo, ip, sport, dport);
@@ -400,8 +427,7 @@ udp_print(netdissect_options *ndo, register const u_char *bp, u_int length,
 	cp = (u_char *)(up + 1);
 	if (cp > ndo->ndo_snapend) {
 		udpipaddr_print(ndo, ip, sport, dport);
-		ND_PRINT((ndo, "[|udp]"));
-		return;
+		goto trunc;
 	}
 
 	if (ndo->ndo_packettype) {
@@ -701,6 +727,10 @@ udp_print(netdissect_options *ndo, register const u_char *bp, u_int length,
 		else
 			ND_PRINT((ndo, "UDP, length %u", ulen));
 	}
+	return;
+
+trunc:
+	ND_PRINT((ndo, "%s", udp_tstr));
 }
 
 
diff --git a/tests/TESTLIST b/tests/TESTLIST
index e81e008..8fd8969 100644
--- a/tests/TESTLIST
+++ b/tests/TESTLIST
@@ -320,3 +320,8 @@ stp-heapoverflow-5	stp-heapoverflow-5.pcap	stp-heapoverflow-5.out	-t -v -n
 arp-too-long-tha	arp-too-long-tha.pcap	arp-too-long-tha.out	-t -v -n
 juniper_header-heapoverflow	juniper_header-heapoverflow.pcap	juniper_header-heapoverflow.out	-t -v -n
 tftp-heapoverflow	tftp-heapoverflow.pcap	tftp-heapoverflow.out	-t -v -n
+
+# RTP tests
+# fuzzed pcap
+rtp-seg-fault-1  rtp-seg-fault-1.pcap  rtp-seg-fault-1.out  -t -v -T rtp
+rtp-seg-fault-2  rtp-seg-fault-2.pcap  rtp-seg-fault-2.out  -t -v -T rtp
diff --git a/tests/rtp-seg-fault-1.out b/tests/rtp-seg-fault-1.out
new file mode 100644
index 0000000..d18ab8c
--- /dev/null
+++ b/tests/rtp-seg-fault-1.out
@@ -0,0 +1,2 @@
+IP (tos 0x0, ttl 255, id 158, offset 0, flags [DF], proto UDP (17), length 37, bad cksum d7e0 (->9cf8)!)
+    208.21.2.184.1512 > 10.1.1.99.53: udp/rtp 57323 c31 +* 4652 3815804996 [|rtp]
diff --git a/tests/rtp-seg-fault-1.pcap b/tests/rtp-seg-fault-1.pcap
new file mode 100644
index 0000000000000000000000000000000000000000..5a0510c3c8bdce230b939ccb18b38e2eef68816d
GIT binary patch
literal 2360
zcmd<$<>fMAU|{gI(UxKa(*L1=g@K>JH6^noIk7;&P|wm*&(HuU%fJ9q3sR>5r8|Tf
z7&w6<Y(PE;C;%~t{e%NZK!HQ_LZyR1J_tjMX9NQd23H0KRfc&E4F3hMKe!;uw1bP0
zF`4xRgX#VMT00Hq3+X&AnBc;!TFfB1us83D*<9Wm;z#YJd<6=Qa{tuUu;JgJy)E!3
zlg&=+eP<7}eO=4_Mnx_1K^joK{LA+I_eUqSPWsON-YT}V*~xe|=bognTc<WQ_^zJ-
zR3M!8R?5noBmT?IUqLs#<}On$Vc-=zS^nkwgI^1j<eAt{YR_L$7WFVMU|*RyP`P<`
ztgcOw|EoqNH|ZT*wF`cV+i1RibEtYf-}KJ@H1h*S?K01N99ITK`gYl8sjj&Q)Dm&S
zC{$tHR?`q5TYD$B+2Lsk5u*DdPF&AY>HYFVWxHaU{;O|sr<zn5YBCd}(sN3<Ccc<^
zHJ8JsZli(e^y5HX)<Aq;^&PL4)cr;|*WULM8lP6A&IlJv+|nQW^RL|M#U+>0%et5O
zUq0R_aGdd%bc1nG_v~#uI5^&YX5m?|X|Z=}(K2<v#B883krF?WOV;yNr-$92zj4k>
zou9KL-lgwph$x5^?5aJf15}~v9L%zOrc&{$Q7{?;qaiRF0;3@?8UmvsfEfb7HVvq4
F0|0J@grfie

literal 0
HcmV?d00001

diff --git a/tests/rtp-seg-fault-2.out b/tests/rtp-seg-fault-2.out
new file mode 100644
index 0000000..1c504da
--- /dev/null
+++ b/tests/rtp-seg-fault-2.out
@@ -0,0 +1,2 @@
+IP (tos 0x0, ttl 252, id 8264, offset 0, flags [none], proto UDP (17), length 100, bad cksum f803 (->c00f)!)
+    208.21.2.184.1512 > 10.1.1.99.514: udp/rtp -12 c31 + 31926 3881022529 455123981 [|rtp]
diff --git a/tests/rtp-seg-fault-2.pcap b/tests/rtp-seg-fault-2.pcap
new file mode 100644
index 0000000000000000000000000000000000000000..77fefbfa2316360c56f384d8e39f739336961a19
GIT binary patch
literal 1192
zcmd<$<>fMAU|{gI(UxKa(*L1=g@K>JH6^noIk7;&P|wm*&(HuU%fJ9q3sR>5r8|Tf
z7&w6<Y(PE;C;%~t9l`=6U?6;%m?4l4!Vu#b!GMFom4P8e!GnR}kKhmH3!+RrxEL9e
zSzj<QF>nMvw2`mb_B?otqqM>j-q7``#SBq3dD=kAPX|aml-;$@`?_~Up=qPmv0q+m
ztxp#2uWc1uf4-#S&mM)zhBFQ~9+N!Lxh*F1lu2x_p(?`>X3J|ns^1xyuP*xWE|oh)
zxcSkH@6L>cbBq|>R~j+ZZCSOS`TM$+K%-stGfpw93IJJs<~dbswq{i?p62!Ov);pp
zsw?;zr-%V1Chi0h58fnNb>Hi5nHKKv_v*W>x5haM2^Id|kJWY5Zr_f#{rdR*nR)-_
zJ9O>6tM$42??1h*cT@`1Wu}~uGED{Q{@7LtB%@f?Z*VcR=NI4gwnXqx=B7oz?iV&q
z$vDq@dR3u8>!a9rSDAmlbT_!Tz~U}YHE;J1mJNaN<v=FOWv3!1-C&))N!JVvCaQWa
zj5~C!N?FxRF}Xa+Dc@+~)$RLd7qIbGTvgBi%qt-!Jfq!x!b6|SatpppJK*`aDfmFq
zzkM^$T@W#Bc%LIV$8Gy5KAjcUjglq&V{Vj7^fBk>O|!4svhUWKJfK}}4_+S2SzQ$s
zTjp!{M4%KXvPb*!Zl|LTi4LdTpYGfP6u2rkb<#QI!mB+~zn#@@F{$f3vEe_PkndUH
z_%)Z8eqZ!h$dk<>r^RaWmJoTM>LW%94ZEfq?e#hg<cLh)t09~-byL^(NiPg`z2pu#
z#@iaS>9=~Kb$^N{!(GF*{LgN;DSl*2a!=WK>VfS|&Sf<k{LTHrr##&5xa~NXUwLfW
z51=vCCw`uvbL$q6HSM>tb^W4`yG1`nzj8n6^dW3-nAxw_MWP&wHU^axp6~Nr=VH7^
zi+h`E`I8S%`wrjC*qrmKKRkF{>V$U-AGUjM0UA*r;-z$XQ}(J+Fz_J&EJHwL2>{o>
BPE-H@

literal 0
HcmV?d00001

diff --git a/tests/udp-length-heapoverflow.out b/tests/udp-length-heapoverflow.out
index 16dbdc9..1515117 100644
--- a/tests/udp-length-heapoverflow.out
+++ b/tests/udp-length-heapoverflow.out
@@ -1,2 +1,2 @@
 IP (tos 0x30, ttl 48, id 12336, offset 0, flags [none], proto UDP (17), length 12336, bad cksum 3030 (->699d)!)
-    48.48.48.48.12336 > 48.48.48.48.12336: [|udp]
+    48.48.48.48.12336 > 48.48.48.48.12336:  [|udp]
-- 
1.7.9.5

