From d6913f7e3fc6d3084ab64d179853468e58cdca4b Mon Sep 17 00:00:00 2001
From: Denis Ovsienko <denis@ovsienko.info>
Date: Mon, 9 Jan 2017 01:01:46 +0000
Subject: [PATCH] CVE-2017-5204/IPv6: fix header printing

Add a few checks to ip6_print() to make it stop decoding the IPv6
headers immediately when the header-specific functions signal an error
condition. Without this it tried to fetch the next header selector for
the next round regardless and could run outside of the allocated packet
space on a specially crafted IPv6 packet.

Brian Carpenter has demonstrated this for the Hop-by-Hop Options header.
Fix that specific case and also the Destination Options and Fragment
header processing as those use the same logic.
---
 print-ip6.c                      |    6 +++++-
 tests/TESTLIST                   |    4 ++++
 tests/ipv6hdr-heapoverflow-v.out |    1 +
 tests/ipv6hdr-heapoverflow.out   |    1 +
 tests/ipv6hdr-heapoverflow.pcap  |  Bin 0 -> 88 bytes
 5 files changed, 11 insertions(+), 1 deletion(-)
 create mode 100644 tests/ipv6hdr-heapoverflow-v.out
 create mode 100644 tests/ipv6hdr-heapoverflow.out
 create mode 100644 tests/ipv6hdr-heapoverflow.pcap

diff --git a/print-ip6.c b/print-ip6.c
index 2e1803f..9f590f2 100644
--- a/print-ip6.c
+++ b/print-ip6.c
@@ -154,15 +154,19 @@ ip6_print(netdissect_options *ndo, const u_char *bp, u_int length)
 		switch (nh) {
 		case IPPROTO_HOPOPTS:
 			advance = hbhopt_print(ndo, cp);
+			if (advance < 0)
+				return;
 			nh = *cp;
 			break;
 		case IPPROTO_DSTOPTS:
 			advance = dstopt_print(ndo, cp);
+			if (advance < 0)
+				return;
 			nh = *cp;
 			break;
 		case IPPROTO_FRAGMENT:
 			advance = frag6_print(ndo, cp, (const u_char *)ip6);
-			if (ndo->ndo_snapend <= cp + advance)
+			if (advance < 0 || ndo->ndo_snapend <= cp + advance)
 				return;
 			nh = *cp;
 			fragmented = 1;
diff --git a/tests/TESTLIST b/tests/TESTLIST
index 9d6dfa3..266e093 100644
--- a/tests/TESTLIST
+++ b/tests/TESTLIST
@@ -321,6 +321,10 @@ arp-too-long-tha	arp-too-long-tha.pcap	arp-too-long-tha.out	-t -v -n
 juniper_header-heapoverflow	juniper_header-heapoverflow.pcap	juniper_header-heapoverflow.out	-t -v -n
 tftp-heapoverflow	tftp-heapoverflow.pcap	tftp-heapoverflow.out	-t -v -n
 
+# bad packets from Brian Carpenter
+ipv6hdr-heapoverflow	ipv6hdr-heapoverflow.pcap	ipv6hdr-heapoverflow.out	-t
+ipv6hdr-heapoverflow-v	ipv6hdr-heapoverflow.pcap	ipv6hdr-heapoverflow-v.out	-t -v
+
 # RTP tests
 # fuzzed pcap
 rtp-seg-fault-1  rtp-seg-fault-1.pcap  rtp-seg-fault-1.out  -t -v -T rtp
diff --git a/tests/ipv6hdr-heapoverflow-v.out b/tests/ipv6hdr-heapoverflow-v.out
new file mode 100644
index 0000000..4e3730a
--- /dev/null
+++ b/tests/ipv6hdr-heapoverflow-v.out
@@ -0,0 +1 @@
+IP6 (class 0x33, flowlabel 0x03030, hlim 48, next-header Options (0) payload length: 12336) 3030:3030:3030:3030:3030:3030:3030:3030 > 3030:3030:3030:3030:3030:3030:3030:3030: HBH [trunc] [|HBH]
diff --git a/tests/ipv6hdr-heapoverflow.out b/tests/ipv6hdr-heapoverflow.out
new file mode 100644
index 0000000..f9bc97e
--- /dev/null
+++ b/tests/ipv6hdr-heapoverflow.out
@@ -0,0 +1 @@
+IP6 3030:3030:3030:3030:3030:3030:3030:3030 > 3030:3030:3030:3030:3030:3030:3030:3030: HBH [|HBH]
diff --git a/tests/ipv6hdr-heapoverflow.pcap b/tests/ipv6hdr-heapoverflow.pcap
new file mode 100644
index 0000000000000000000000000000000000000000..19d28d6ee952684e8f0248b2f3993485639150a5
GIT binary patch
literal 88
ocmca|c+)~A1{MYb7+_#vc*=m_8UXnqsbsJ`k~mB~8V%D504|>p$p8QV

literal 0
HcmV?d00001

-- 
1.7.9.5

